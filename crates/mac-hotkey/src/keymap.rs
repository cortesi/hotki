use mac_keycode::Key as Code;

pub fn code_from_scancode(sc: u16) -> Option<Code> {
    use Code as KB;
    Some(match sc {
        0x00 => KB::A,
        0x01 => KB::S,
        0x02 => KB::D,
        0x03 => KB::F,
        0x04 => KB::H,
        0x05 => KB::G,
        0x06 => KB::Z,
        0x07 => KB::X,
        0x08 => KB::C,
        0x09 => KB::V,
        0x0b => KB::B,
        0x0c => KB::Q,
        0x0d => KB::W,
        0x0e => KB::E,
        0x0f => KB::R,
        0x10 => KB::Y,
        0x11 => KB::T,
        0x12 => KB::Digit1,
        0x13 => KB::Digit2,
        0x14 => KB::Digit3,
        0x15 => KB::Digit4,
        0x16 => KB::Digit6,
        0x17 => KB::Digit5,
        0x18 => KB::Equal,
        0x19 => KB::Digit9,
        0x1a => KB::Digit7,
        0x1b => KB::Minus,
        0x1c => KB::Digit8,
        0x1d => KB::Digit0,
        0x1e => KB::RightBracket,
        0x1f => KB::O,
        0x20 => KB::U,
        0x21 => KB::LeftBracket,
        0x22 => KB::I,
        0x23 => KB::P,
        0x24 => KB::Return,
        0x25 => KB::L,
        0x26 => KB::J,
        0x27 => KB::Quote,
        0x28 => KB::K,
        0x29 => KB::Semicolon,
        0x2a => KB::Backslash,
        0x2b => KB::Comma,
        0x2c => KB::Slash,
        0x2d => KB::N,
        0x2e => KB::M,
        0x2f => KB::Period,
        0x30 => KB::Tab,
        0x31 => KB::Space,
        0x32 => KB::Grave,
        0x33 => KB::Delete,
        0x35 => KB::Escape,
        0x40 => KB::F17,
        0x41 => KB::KeypadDecimal,
        0x43 => KB::KeypadMultiply,
        0x45 => KB::KeypadPlus,
        0x47 => KB::KeypadClear,
        0x48 => KB::VolumeUp,
        0x49 => KB::VolumeDown,
        0x4a => KB::Mute,
        0x4b => KB::KeypadDivide,
        0x4c => KB::KeypadEnter,
        0x4e => KB::KeypadMinus,
        0x4f => KB::F18,
        0x50 => KB::F19,
        0x51 => KB::KeypadEquals,
        0x52 => KB::Keypad0,
        0x53 => KB::Keypad1,
        0x54 => KB::Keypad2,
        0x55 => KB::Keypad3,
        0x56 => KB::Keypad4,
        0x57 => KB::Keypad5,
        0x58 => KB::Keypad6,
        0x59 => KB::Keypad7,
        0x5a => KB::F20,
        0x5b => KB::Keypad8,
        0x5c => KB::Keypad9,
        0x60 => KB::F5,
        0x61 => KB::F6,
        0x62 => KB::F7,
        0x63 => KB::F3,
        0x64 => KB::F8,
        0x65 => KB::F9,
        0x67 => KB::F11,
        0x69 => KB::F13,
        0x6a => KB::F16,
        0x6b => KB::F14,
        0x6d => KB::F10,
        0x6f => KB::F12,
        0x71 => KB::F15,
        0x72 => KB::Help,
        0x73 => KB::Home,
        0x74 => KB::PageUp,
        0x75 => KB::ForwardDelete,
        0x76 => KB::F4,
        0x77 => KB::End,
        0x78 => KB::F2,
        0x79 => KB::PageDown,
        0x7a => KB::F1,
        0x7b => KB::LeftArrow,
        0x7c => KB::RightArrow,
        0x7d => KB::DownArrow,
        0x7e => KB::UpArrow,
        _ => return None,
    })
}

#[cfg(test)]
pub fn scancode_from_code(code: Code) -> Option<u16> {
    use Code as KB;
    Some(match code {
        KB::A => 0x00,
        KB::S => 0x01,
        KB::D => 0x02,
        KB::F => 0x03,
        KB::H => 0x04,
        KB::G => 0x05,
        KB::Z => 0x06,
        KB::X => 0x07,
        KB::C => 0x08,
        KB::V => 0x09,
        KB::B => 0x0b,
        KB::Q => 0x0c,
        KB::W => 0x0d,
        KB::E => 0x0e,
        KB::R => 0x0f,
        KB::Y => 0x10,
        KB::T => 0x11,
        KB::Digit1 => 0x12,
        KB::Digit2 => 0x13,
        KB::Digit3 => 0x14,
        KB::Digit4 => 0x15,
        KB::Digit6 => 0x16,
        KB::Digit5 => 0x17,
        KB::Equal => 0x18,
        KB::Digit9 => 0x19,
        KB::Digit7 => 0x1a,
        KB::Minus => 0x1b,
        KB::Digit8 => 0x1c,
        KB::Digit0 => 0x1d,
        KB::RightBracket => 0x1e,
        KB::O => 0x1f,
        KB::U => 0x20,
        KB::LeftBracket => 0x21,
        KB::I => 0x22,
        KB::P => 0x23,
        KB::Return => 0x24,
        KB::L => 0x25,
        KB::J => 0x26,
        KB::Quote => 0x27,
        KB::K => 0x28,
        KB::Semicolon => 0x29,
        KB::Backslash => 0x2a,
        KB::Comma => 0x2b,
        KB::Slash => 0x2c,
        KB::N => 0x2d,
        KB::M => 0x2e,
        KB::Period => 0x2f,
        KB::Tab => 0x30,
        KB::Space => 0x31,
        KB::Grave => 0x32,
        KB::Delete => 0x33,
        KB::Escape => 0x35,
        KB::F17 => 0x40,
        KB::KeypadDecimal => 0x41,
        KB::KeypadMultiply => 0x43,
        KB::KeypadPlus => 0x45,
        KB::KeypadClear => 0x47,
        KB::VolumeUp => 0x48,
        KB::VolumeDown => 0x49,
        KB::Mute => 0x4a,
        KB::KeypadDivide => 0x4b,
        KB::KeypadEnter => 0x4c,
        KB::KeypadMinus => 0x4e,
        KB::F18 => 0x4f,
        KB::F19 => 0x50,
        KB::KeypadEquals => 0x51,
        KB::Keypad0 => 0x52,
        KB::Keypad1 => 0x53,
        KB::Keypad2 => 0x54,
        KB::Keypad3 => 0x55,
        KB::Keypad4 => 0x56,
        KB::Keypad5 => 0x57,
        KB::Keypad6 => 0x58,
        KB::Keypad7 => 0x59,
        KB::F20 => 0x5a,
        KB::Keypad8 => 0x5b,
        KB::Keypad9 => 0x5c,
        KB::F5 => 0x60,
        KB::F6 => 0x61,
        KB::F7 => 0x62,
        KB::F3 => 0x63,
        KB::F8 => 0x64,
        KB::F9 => 0x65,
        KB::F11 => 0x67,
        KB::F13 => 0x69,
        KB::F16 => 0x6a,
        KB::F14 => 0x6b,
        KB::F10 => 0x6d,
        KB::F12 => 0x6f,
        KB::F15 => 0x71,
        KB::Help => 0x72,
        KB::Home => 0x73,
        KB::PageUp => 0x74,
        KB::ForwardDelete => 0x75,
        KB::F4 => 0x76,
        KB::End => 0x77,
        KB::F2 => 0x78,
        KB::PageDown => 0x79,
        KB::F1 => 0x7a,
        KB::LeftArrow => 0x7b,
        KB::RightArrow => 0x7c,
        KB::DownArrow => 0x7d,
        KB::UpArrow => 0x7e,
        _ => return None,
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn roundtrip_some_keys() {
        let samples = [
            (0x00, Code::A),
            (0x31, Code::Space),
            (0x33, Code::Delete),
            (0x7b, Code::LeftArrow),
            (0x7e, Code::UpArrow),
            (0x24, Code::Return),
            (0x12, Code::Digit1),
            (0x29, Code::Semicolon),
        ];
        for (sc, code) in samples {
            assert_eq!(code_from_scancode(sc), Some(code));
        }
        for (sc, code) in samples {
            assert_eq!(scancode_from_code(code), Some(sc));
        }
    }
}
